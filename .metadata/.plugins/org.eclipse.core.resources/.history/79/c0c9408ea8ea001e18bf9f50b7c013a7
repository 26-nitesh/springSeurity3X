package com.ems.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class MySecConfig{
	
	
	@Bean
	 UserDetailsService detailsService(PasswordEncoder encoder) {
		 UserDetails userDetails = User.withUsername("diwakar").password(encoder.encode("11a")).build();
	   return new InMemoryUserDetailsManager(userDetails);
	}
	
	
//	@Bean
//	SecurityFilterChain chain(HttpSecurity http) throws Exception {
//		
////		http.csrf(AbstractHttpConfigurer::disable).
////		 http.csrf(Customizer.withDefaults()).authorizeRequests(
////		 })
//		return http.csrf().disable().authorizeRequests(auth->{
//			auth.requestMatchers("/t").permitAll().
//			anyRequest().authenticated();
//		}).httpBasic().and().build();
//	}
	
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		return http
                .authorizeHttpRequests(
                        auth -> {
                            auth.requestMatchers("/pp").permitAll().anyRequest().authenticated();
                        })
                .httpBasic(withDefaults())
                .build();
	}
	
	private Customizer<HttpBasicConfigurer<HttpSecurity>> withDefaults() {
		// TODO Auto-generated method stub
		return Customizer.withDefaults();
	}


	@Bean
	 PasswordEncoder encoder() {
		return new BCryptPasswordEncoder();
	}
	

}
